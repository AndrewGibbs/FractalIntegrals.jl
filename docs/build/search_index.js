var documenterSearchIndex = {"docs":
[{"location":"index.html#FractalIntegrals","page":"Home","title":"FractalIntegrals","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"This documentation explains basic usage of the Julia package FractalIntegrals. This package is designed to approximate integrals and solve integral equations on fractals.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"There is no generally accepted definition of the word fractal. Here we consider self-similar sets, which can be described as the attractor of an iterated function system, consisting of a set of affine contraction maps.","category":"page"},{"location":"makeIFS.html","page":"Fractals","title":"Fractals","text":"using FractalIntegrals\nusing Plots; gr()\nPlots.reset_defaults()","category":"page"},{"location":"makeIFS.html#Constructing-Fractals-and-Fractal-measures","page":"Fractals","title":"Constructing Fractals and Fractal measures","text":"","category":"section"},{"location":"makeIFS.html","page":"Fractals","title":"Fractals","text":"This package focuses on self-similar fractals, which can be described by a finite set of self-similar maps. These maps are called similarities.","category":"page"},{"location":"makeIFS.html#Similarities","page":"Fractals","title":"Similarities","text":"","category":"section"},{"location":"makeIFS.html","page":"Fractals","title":"Fractals","text":"Each similarity is of the form:","category":"page"},{"location":"makeIFS.html","page":"Fractals","title":"Fractals","text":"s_m(x)=rho_mA_mx + delta_mquad xinmathbbR^n","category":"page"},{"location":"makeIFS.html","page":"Fractals","title":"Fractals","text":"where rho_min(01) is the contraction factor, A_minR^Ntimes N is a rotation matrix, and deltainR^N is a translation vector. Here we call NinmathbbN the ambient dimension.","category":"page"},{"location":"makeIFS.html","page":"Fractals","title":"Fractals","text":"Similarity","category":"page"},{"location":"makeIFS.html#FractalIntegrals.Similarity","page":"Fractals","title":"FractalIntegrals.Similarity","text":"Similarity{N, T} <: AbstractSimilarity{N, T}\n\nConstructs a similarity, which can be used to describe geometry of self-similar fractals. N is the dimension of the ambient space, and T<:Number.\n\nMathematically, this captures the following map:\n\ns(x) = δ + ρAx x  ℝⁿ\n\nFields\n\nρ :: T: The contraction factor.\nδ :: SVector{N,T}: The translation vector.\nA :: SMatrix{N,N,T} : The rotation/reflection matrix.\nρA :: SMatrix{N,N,T} : The rotation/reflection matrix multiplied by the contraction factor.\n\nExamples\n\ns₁ = Similarity(1/3, [0,0])\ns₂ = Similarity(Float32(1/3), rand(3), [-1 0; 0 1])\n\nIn the first example above, the third argument is not given,  so it is assumed that A=I.\n\nVarious binary operations can be performed on Similarity:\n\ns₂₁ = s₁ ∘ s₂\ns₂⁻¹ = inv(s₂)\ns₁³ = s₁^3\n\nIn each of the above examples, a Similarity is returned.\n\nSimilarity can be applied as a function\n\nx = rand(2)\ny = s₁(x)\n\n\n\n\n\n","category":"type"},{"location":"makeIFS.html#Attractors","page":"Fractals","title":"Attractors","text":"","category":"section"},{"location":"makeIFS.html","page":"Fractals","title":"Fractals","text":"An iterated function system (IFS) is a set of M similaritites s_m_m=1^M, and an attractor of an iterated function system Gamma satisfies","category":"page"},{"location":"makeIFS.html","page":"Fractals","title":"Fractals","text":"Gamma  = bigcup_m=1^M s_m(Gamma)","category":"page"},{"location":"makeIFS.html","page":"Fractals","title":"Fractals","text":"s_m(x)=rho_mA_mx + delta_mquad xinmathbbR^n","category":"page"},{"location":"makeIFS.html","page":"Fractals","title":"Fractals","text":"Attractor","category":"page"},{"location":"makeIFS.html#FractalIntegrals.Attractor","page":"Fractals","title":"FractalIntegrals.Attractor","text":"Attractor{N, M, T} <: AbstractAttractor{N, M, T}\n\nAn attractor of an iterated function system (IFS). In this context, an IFS should be interpreted as a set of similarities. Mathematically, an IFS attractor is the unique bounded non-empty set satisfying\n\nΓ = ₘ sₘ(Γ)\n\nwhere sₘ are similarities, defined in the docstring Similarity. For a fuller explanation, see for e.g. this wikipedia article https://en.wikipedia.org/wiki/Iterated_function_system.\n\nParameters\n\nN is the ambient dimension of the attractor\nM is the number of similarities\nT<:Number is the numeric type\n\nFields\n\nifs::SVector{M, Similarity{N, T}}: iterated function system\ndiam::T: diamter of attractor\nd::T: Hausdorff dimension of attractor\nconnectedness::Matrix{Bool}: matrix describing connected subcomponents\nsymmetries::Vector{Similarity{N, T}}: maps in symmetry group\n\nAttractors can be constructed using a vector or tuple of similarities to represent the IFS; the diameter and Hausdorff dimension are computed automatically,  the connectedness matrix is taken to be the identity, corresponding to a disjoint attractor, and the symmetry group is assumed to be the trivial group.\n\nIf the connectedness matrix is assumed to be the identity when the attractor is non-disjoint, this will impact accuracy of calculations of singular integrals.\n\nExamples\n\ns₁ = Similarity(1/3, 0)\ns₂ = Similarity(1/3, 2/3)\ncantor_set = Attractor(s₁, s₂)\n\ncourage = Similarity(1/2, [0, 0])\nwisdom  = Similarity(1/2, [1/2, 0])\npower   = Similarity(1/2, [1/4, sqrt(3)/4])\nsierpinski_triangle = Attractor(courage, wisdom, power, connectedness = Bool(ones(3,3)))\n\nNote how the connectedness matrix for the Sierpinski triangle is all ones, because the subcomponents all touch at the corners.\n\n\n\n\n\n","category":"type"},{"location":"makeIFS.html#Plotting-attractors","page":"Fractals","title":"Plotting attractors","text":"","category":"section"},{"location":"makeIFS.html","page":"Fractals","title":"Fractals","text":"In the following example, we build and plot a Cantor set from scratch.","category":"page"},{"location":"makeIFS.html","page":"Fractals","title":"Fractals","text":"using FractalIntegrals\ns₁ = Similarity(1/3,0)\ns₂ = Similarity(1/3,2/3)\nΓ = Attractor(s₁, s₂)\nplot(Γ)","category":"page"},{"location":"makeIFS.html","page":"Fractals","title":"Fractals","text":"Note that Plots.plot has a method for a Attractor type.","category":"page"},{"location":"makeIFS.html#Presets","page":"Fractals","title":"Presets","text":"","category":"section"},{"location":"makeIFS.html","page":"Fractals","title":"Fractals","text":"You can create your own attractor from scratch, as explained above. But a range of preset attractors are available.","category":"page"},{"location":"makeIFS.html","page":"Fractals","title":"Fractals","text":"getfractal","category":"page"},{"location":"makeIFS.html#FractalIntegrals.getfractal","page":"Fractals","title":"FractalIntegrals.getfractal","text":"getfractal(T::Type, fractalname::Symbol; vargs...)\ngetfractal(T::Type, fractalname::String; vargs...)\ngetfractal(fractalname; vargs...)\n\nReturns a preset fractal attractor corresponding to fractalname. This can be a sybol or a string.\n\nPresets:\n\ncantorset: Cantor Set\ncantordust: Cantor Dust\nsierpinskitriangle: Sierpinski Triangle\nvicsek: Vicsek Fractal\nkochcurve: Koch Curve\nsierpinskicarpet: Sierpinski Carpet\nheighwaydragon: Heighway Dragon\nkochsnowflake: Koch Snowflake\n\nSome of the presets will take an optional input argument. For example, the contraction factor ρ∈(0,1/2] of Cantor sets and dust.\n\nΓ = getfractal(\"cantor set\"; ρ = 1/4)\n\n\n\n\n\n","category":"function"},{"location":"makeIFS.html","page":"Fractals","title":"Fractals","text":"Γ = getfractal(\"sierpinskitriangle\")\nplot(Γ)","category":"page"},{"location":"makeIFS.html#Sub-components","page":"Fractals","title":"Sub-components","text":"","category":"section"},{"location":"makeIFS.html","page":"Fractals","title":"Fractals","text":"It is often convenient to talk about a subcomponent of a fractal Gamma which is a scaled copy of the original Gamma. This is particularly useful when meshing the fractal with fractal mesh elements. To do this, vector indexing is used, for example for mathbfm=m_1ldotsm_ell,","category":"page"},{"location":"makeIFS.html","page":"Fractals","title":"Fractals","text":"Gamma_mathbfm = s_m_1circ ldots circ s_m_ell (Gamma)","category":"page"},{"location":"makeIFS.html","page":"Fractals","title":"Fractals","text":"This can be achieved by treating attractors as vectors.","category":"page"},{"location":"makeIFS.html","page":"Fractals","title":"Fractals","text":"Γ₁ = Γ[1]\n𝐦 = [3,2,3,1]\nΓ₃₂₃₁ = Γ[𝐦]\nplot!(Γ₁,markersize=1)\nplot!(Γ₃₂₃₁,markersize=1.5)","category":"page"},{"location":"makeIFS.html#Fractal-Measures","page":"Fractals","title":"Fractal Measures","text":"","category":"section"},{"location":"makeIFS.html","page":"Fractals","title":"Fractals","text":"We now consider a measure mu supported on a fractal attractor Gamma. This is necessary to define integrals and integral equations on Gamma.","category":"page"}]
}
